module Reasoner
       ( MassAssignment(..)
       , makeMassAssignment
       , Reasoner(..)
       , runReasoner
       , getMass
       ) where

import Data.Maybe (fromMaybe)
import Data.Ratio ((%))
import Control.Applicative
import qualified Data.Map as M

-----------------------------------------------------------------------------------

-- | Core data types.

-----------------------------------------------------------------------------------

-- | Maps sets of atomType to belief mass assignments.
newtype MassAssignment atomType =
  MassAssignment
  { unMass :: M.Map [atomType] Rational
  }

-- | Create a mass assignment.
makeMassAssignment :: Ord atomType => [([atomType], Rational)]
                      -> MassAssignment atomType
makeMassAssignment = MassAssignment . M.fromList

-- | The reasoner object, parameterized by the underlying reasoning calculus,
--   the atoms that make up the frame of discernment, and the result of the
--   computation.
data Reasoner calcType atomType a =
  Reasoner
  { unReasoner :: MassAssignment atomType -> a
  }

-- | Functor instance: map a morphism in the category Hask to the
--   subcategory of Reasoner types.
instance Functor (Reasoner calcType atomType) where
  fmap f r = Reasoner $ \mass -> f $ unReasoner r mass

-- | Reasoners also make nice applicative functors, as they are
--   effectful computations.
instance Applicative (Reasoner calcType atomType) where
  pure x = Reasoner $ \mass -> x

  rf <*> rx = Reasoner $ \mass -> let f = unReasoner rf mass
                                      x = unReasoner rx mass
                                  in f x

-- | Reasoners are also monads.
instance Monad (Reasoner calcType atomType) where
  return = pure

  r >>= f = Reasoner $ \mass -> let x = unReasoner r mass
                                    g = unReasoner $ f x
                                in g mass

-----------------------------------------------------------------------------------

-- | Helper functions.

-----------------------------------------------------------------------------------

-- | Run a computation with the given mass assignment.
runReasoner :: MassAssignment atomType
               -> Reasoner calcType atomType a
               -> a
runReasoner mass r = unReasoner r $ mass

-- | Helper function: access the mass underneath the computation.
getMass :: Reasoner calcType atomType (MassAssignment atomType)
getMass = Reasoner $ \mass -> mass

-- | Get the mass of an event, or zero if the event is not in the mass assignment.
massOf :: Ord atomType => [atomType] -> Reasoner calcType atomType Rational
massOf event = fromMaybe 0 . M.lookup event . unMass <$> getMass

-----------------------------------------------------------------------------------

-- | Test code.

-----------------------------------------------------------------------------------

data Atoms = Red | Blue deriving (Show, Eq, Ord)
data SL = SL

type MyReasoner a = Reasoner SL Atoms a

mass = makeMassAssignment [ ([Red], 1%4)
                          , ([Blue], 1%4)
                          , ([Red, Blue], 1%2)
                          ]

runTest = runReasoner mass

test :: [[Atoms]]
test = runTest $ map fst . M.toList . unMass <$> getMass

test2 :: [Rational]
test2 = runTest $ mapM massOf [[Red], [Blue], [Red, Blue]]